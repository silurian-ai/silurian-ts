/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../../../environments";
import * as core from "../../../../../../core";
import { Regional } from "../resources/regional/client/Client";

export declare namespace Experimental {
    export interface Options {
        environment?: core.Supplier<environments.EarthEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        apiKey: core.Supplier<string>;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional headers to include in the request. */
        headers?: Record<string, string>;
    }
}

export class Experimental {
    protected _regional: Regional | undefined;

    constructor(protected readonly _options: Experimental.Options) {}

    public get regional(): Regional {
        return (this._regional ??= new Regional(this._options));
    }
}
