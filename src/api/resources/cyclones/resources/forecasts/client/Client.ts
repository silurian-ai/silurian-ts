/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../../../environments";
import * as core from "../../../../../../core";
import * as Earth from "../../../../../index";
import urlJoin from "url-join";
import * as errors from "../../../../../../errors/index";

export declare namespace Forecasts {
    export interface Options {
        environment?: core.Supplier<environments.EarthEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        apiKey: core.Supplier<string>;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional headers to include in the request. */
        headers?: Record<string, string>;
    }
}

export class Forecasts {
    constructor(protected readonly _options: Forecasts.Options) {}

    /**
     * Query the available cyclone forecasts for a particular time
     *
     * @param {Earth.cyclones.ForecastsListRequest} request
     * @param {Forecasts.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Earth.UnprocessableEntityError}
     *
     * @example
     *     await client.cyclones.forecasts.list()
     */
    public async list(
        request: Earth.cyclones.ForecastsListRequest = {},
        requestOptions?: Forecasts.RequestOptions,
    ): Promise<Earth.CycloneForecastResponse[]> {
        const { time, min_storm_category: minStormCategory, model } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (time != null) {
            _queryParams["time"] = time;
        }

        if (minStormCategory != null) {
            _queryParams["min_storm_category"] = minStormCategory.toString();
        }

        if (model != null) {
            _queryParams["model"] = model;
        }

        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.EarthEnvironment.Production,
                "cyclones/forecasts",
            ),
            method: "GET",
            headers: {
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "silurian",
                "X-Fern-SDK-Version": "0.0.13",
                "User-Agent": "silurian/0.0.13",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...(await this._getCustomAuthorizationHeaders()),
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            queryParameters: _queryParams,
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return _response.body as Earth.CycloneForecastResponse[];
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 422:
                    throw new Earth.UnprocessableEntityError(_response.error.body as Earth.HttpValidationError);
                default:
                    throw new errors.EarthError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.EarthError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.EarthTimeoutError("Timeout exceeded when calling GET /cyclones/forecasts.");
            case "unknown":
                throw new errors.EarthError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Get cyclone tracks in GeoJSON (MF-GeoJSON) format
     *
     * @param {string} stormId
     * @param {Earth.cyclones.ForecastsTrackRequest} request
     * @param {Forecasts.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Earth.UnprocessableEntityError}
     *
     * @example
     *     await client.cyclones.forecasts.track("storm_id")
     */
    public async track(
        stormId: string,
        request: Earth.cyclones.ForecastsTrackRequest = {},
        requestOptions?: Forecasts.RequestOptions,
    ): Promise<Earth.FeatureCollection> {
        const { time, max_lead_time: maxLeadTime, model } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (time != null) {
            _queryParams["time"] = time;
        }

        if (maxLeadTime != null) {
            _queryParams["max_lead_time"] = maxLeadTime;
        }

        if (model != null) {
            _queryParams["model"] = model;
        }

        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.EarthEnvironment.Production,
                `cyclones/forecasts/${encodeURIComponent(stormId)}/track`,
            ),
            method: "GET",
            headers: {
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "silurian",
                "X-Fern-SDK-Version": "0.0.13",
                "User-Agent": "silurian/0.0.13",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...(await this._getCustomAuthorizationHeaders()),
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            queryParameters: _queryParams,
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return _response.body as Earth.FeatureCollection;
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 422:
                    throw new Earth.UnprocessableEntityError(_response.error.body as Earth.HttpValidationError);
                default:
                    throw new errors.EarthError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.EarthError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.EarthTimeoutError(
                    "Timeout exceeded when calling GET /cyclones/forecasts/{storm_id}/track.",
                );
            case "unknown":
                throw new errors.EarthError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Get cyclone forecast cone in GeoJSON format
     *
     * @param {string} stormId
     * @param {Earth.cyclones.ForecastsConeRequest} request
     * @param {Forecasts.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Earth.UnprocessableEntityError}
     *
     * @example
     *     await client.cyclones.forecasts.cone("storm_id")
     */
    public async cone(
        stormId: string,
        request: Earth.cyclones.ForecastsConeRequest = {},
        requestOptions?: Forecasts.RequestOptions,
    ): Promise<Earth.FeatureCollection> {
        const { time, max_lead_time: maxLeadTime, smooth_cone: smoothCone, model } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (time != null) {
            _queryParams["time"] = time;
        }

        if (maxLeadTime != null) {
            _queryParams["max_lead_time"] = maxLeadTime;
        }

        if (smoothCone != null) {
            _queryParams["smooth_cone"] = smoothCone.toString();
        }

        if (model != null) {
            _queryParams["model"] = model;
        }

        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.EarthEnvironment.Production,
                `cyclones/forecasts/${encodeURIComponent(stormId)}/cone`,
            ),
            method: "GET",
            headers: {
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "silurian",
                "X-Fern-SDK-Version": "0.0.13",
                "User-Agent": "silurian/0.0.13",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...(await this._getCustomAuthorizationHeaders()),
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            queryParameters: _queryParams,
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return _response.body as Earth.FeatureCollection;
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 422:
                    throw new Earth.UnprocessableEntityError(_response.error.body as Earth.HttpValidationError);
                default:
                    throw new errors.EarthError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.EarthError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.EarthTimeoutError(
                    "Timeout exceeded when calling GET /cyclones/forecasts/{storm_id}/cone.",
                );
            case "unknown":
                throw new errors.EarthError({
                    message: _response.error.errorMessage,
                });
        }
    }

    protected async _getCustomAuthorizationHeaders() {
        const apiKeyValue = await core.Supplier.get(this._options.apiKey);
        return { "X-API-KEY": apiKeyValue };
    }
}
